*flash.nvim.txt*         For Neovim >= 0.8.0         Last change: 2023 June 21

==============================================================================
Table of Contents                               *flash.nvim-table-of-contents*

1. flash.nvim                                          |flash.nvim-flash.nvim|
  - Features                                  |flash.nvim-flash.nvim-features|
  - Requirements                          |flash.nvim-flash.nvim-requirements|
  - Installation                          |flash.nvim-flash.nvim-installation|
  - Configuration                        |flash.nvim-flash.nvim-configuration|
  - Usage                                        |flash.nvim-flash.nvim-usage|
  - Examples                                  |flash.nvim-flash.nvim-examples|
  - Alternatives                          |flash.nvim-flash.nvim-alternatives|

==============================================================================
1. flash.nvim                                          *flash.nvim-flash.nvim*

`flash.nvim` lets you navigate your code with search labels, enhanced character
motions, and Treesitter integration.

Search IntegrationStandalone Jumpf, t, F, TTreesitter
FEATURES                                      *flash.nvim-flash.nvim-features*

- **Search Integration**integrate **flash.nvim** with your regular
    search using / or ?. Labels appear next to the matches,
    allowing you to quickly jump to any location. Labels are
    guaranteed not to exist as a continuation of the search pattern.
- **type as many characters as you want** before using a jump label.
- **Enhanced f, t, F, T motions**
- **Treesitter Integration**all parents of the Treesitter node
    under your cursor are highlighted with a label for quick selection
    of a specific Treesitter node.
- **Jump Mode**a standalone jumping mode similar to search
- **Search Modes**`exact`, `search` (regex), and `fuzzy` search modes
- ðŸªŸ **Multi Window** jumping
- **dot-repeatable** jumps


REQUIREMENTS                              *flash.nvim-flash.nvim-requirements*

- Neovim >= **0.8.0** (needs to be built with **LuaJIT**)


INSTALLATION                              *flash.nvim-flash.nvim-installation*

Install the plugin with your preferred package manager:

lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
      "folke/flash.nvim",
      event = "VeryLazy",
      ---@type Flash.Config
      opts = {},
      keys = {
        {
          "s",
          mode = { "n", "x", "o" },
          function()
            require("flash").jump()
          end,
        },
        {
          "S",
          mode = { "o", "x" },
          function()
            require("flash").treesitter()
          end,
        },
      },
    }
<


CONFIGURATION                            *flash.nvim-flash.nvim-configuration*

**flash.nvim** is highly configurable. Please refer to the default settings
below.

Default Settings ~

>lua
    {
      -- labels = "abcdefghijklmnopqrstuvwxyz",
      labels = "asdfghjklqwertyuiopzxcvbnm",
      search = {
        -- search/jump in all windows
        multi_window = true,
        -- search direction
        forward = true,
        -- when `false`, find only matches in the given direction
        wrap = true,
        ---@type Flash.Pattern.Mode
        -- Each mode will take ignorecase and smartcase into account.
        --  exact: exact match
        --  search: regular search
        --  fuzzy: fuzzy search
        --  fun(str): custom function that returns a pattern
        --   For example, to only match at the beginning of a word:
        --   mode = function(str)
        --     return "\\<" .. str
        --   end,
        mode = "exact",
        -- behave like `incsearch`
        incremental = false,
        filetype_exclude = { "notify", "noice" },
      },
      jump = {
        -- save location in the jumplist
        jumplist = true,
        -- jump position
        pos = "start", ---@type "start" | "end" | "range"
        -- add pattern to search history
        history = false,
        -- add pattern to search register
        register = false,
        -- clear highlight after jump
        nohlsearch = false,
      },
      highlight = {
        label = {
          -- add a label for the first match in the current window.
          -- you can always jump to the first match with `<CR>`
          current = false,
          -- show the label after the match
          after = true, ---@type boolean|number[]
          -- show the label before the match
          before = false, ---@type boolean|number[]
          -- position of the label extmark
          style = "overlay", ---@type "eol" | "overlay" | "right_align" | "inline"
        },
        -- show a backdrop with hl FlashBackdrop
        backdrop = true,
        -- Highlight the search matches
        matches = true,
        -- extmark priority
        priority = 5000,
        groups = {
          match = "FlashMatch",
          current = "FlashCurrent",
          backdrop = "FlashBackdrop",
          label = "FlashLabel",
        },
      },
      -- You can override the default options for a specific mode.
      -- Use it with `require("flash").jump({mode = "forward"})`
      ---@type table<string, Flash.Config>
      modes = {
        -- options used when flash is activated through
        -- a regular search with `/` or `?`
        search = {
          enabled = true, -- enable flash for search
          highlight = { backdrop = false },
          jump = { history = true, register = true, nohlsearch = true },
          search = {
            -- `forward` will be automatically set to the search direction
            -- `mode` is always set to `search`
            -- `incremental` is set to `true` when `incsearch` is enabled
          },
        },
        -- options used when flash is activated through
        -- `f`, `F`, `t`, `T`, `;` and `,` motions
        char = {
          enabled = true,
          search = { wrap = false },
          highlight = { backdrop = true },
          jump = { register = false },
        },
        -- options used for treesitter selections
        -- `require("flash").treesitter()`
        treesitter = {
          labels = "abcdefghijklmnopqrstuvwxyz",
          jump = { pos = "range" },
          highlight = {
            label = { before = true, after = true, style = "inline" },
            backdrop = false,
            matches = false,
          },
        },
      },
    }
<


USAGE                                            *flash.nvim-flash.nvim-usage*

- `require("flash").jump(opts?)` opens **flash** with the given options
- `require("flash").treesitter(opts?)` opens **flash** in **Treesitter** mode


EXAMPLES                                      *flash.nvim-flash.nvim-examples*

Forward search only ~

>lua
    require("flash").jump({
      search = { forward = true, wrap = false, multi_window = false },
    })
<

Backward search only ~

>lua
    require("flash").jump({
      search = { forward = false, wrap = false, multi_window = false },
    })
<


ALTERNATIVES                              *flash.nvim-flash.nvim-alternatives*

- leap.nvim <https://github.com/ggandor/leap.nvim>
- lightspeed.nvim <https://github.com/ggandor/lightspeed.nvim>
- mini.jump <https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-jump.md>
- mini.jump2d <https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-jump2d.md>
- hop.nvim <https://github.com/phaazon/hop.nvim>
- pounce.nvim <https://github.com/rlane/pounce.nvim>
- sj.nvim <https://github.com/woosaaahh/sj.nvim>
- nvim-treehopper <https://github.com/mfussenegger/nvim-treehopper>
- flit.nvim <https://github.com/ggandor/flit.nvim>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
